from pathlib import Path
from typing import ClassVar, Literal

from pydantic import Field, computed_field
from pydantic_settings import SettingsConfigDict

from app.config.config_loader import BaseSettingsWithLoader
from app.config.constants import ROOT_DIR


__all__ = (
    "AppBaseSettings",
    "app_base_settings",
)


class AppBaseSettings(BaseSettingsWithLoader):
    """Application core configuration settings loaded from YAML files.

    Inherits from BaseYAMLSettings to provide YAML configuration capabilities.
    Validates and manages essential application parameters across environments.
    """

    yaml_group: ClassVar[str] = "app"
    model_config = SettingsConfigDict(
        env_prefix="APP_",
        extra="forbid",
    )

    root_dir: Path = Field(
        default=ROOT_DIR,
        description="Absolute path to project root directory",
        examples=["/usr/src/app", "C:/Projects/my_app"],
    )
    host: str = Field(
        ...,
        description="Server hostname or IP address",
        examples=["localhost", "myapp.com"],
    )
    port: int = Field(
        ...,
        ge=1,
        le=65535,
        description="Server port number",
    )
    prefect_port: int = Field(
        ...,
        ge=1,
        le=65535,
        description="Prefect server port number",
        examples=[8080, 8081],
    )
    environment: Literal["development", "staging", "production"] = Field(
        ...,
        description="Current runtime environment (dev/staging/prod)",
        examples=["development", "staging", "production"],
    )
    version: str = Field(
        ...,
        pattern=r"^\d+\.\d+\.\d+$",
        description="Semantic version of the application (major.minor.patch)",
        examples=["1.0.0", "2.3.4", "0.5.1"],
    )
    debug_mode: bool = Field(
        ...,
        description="Flag indicating debug mode status",
        examples=[True, False],
    )
    enable_swagger: bool = Field(
        ...,
        description="Flag indicating swagger status",
        examples=[True, False],
    )
    socket_ping_timeout: int = Field(
        ...,
        description="Timeout for socket ping in seconds",
        examples=[5],
    )
    socket_close_timeout: int = Field(
        ...,
        description="Timeout for socket close in seconds",
        examples=[5],
    )

    @computed_field
    def base_url(self) -> str:
        """Constructs the normalized endpoint string."""
        return f"{self.host}:{self.port}"

    @computed_field
    def prefect_url(self) -> str:
        """Constructs the normalized endpoint string Prefect URL."""
        return f"{self.host}:{self.prefect_port}"


class SchedulerSettings(BaseSettingsWithLoader):
    """Scheduler configuration settings loaded from YAML files.

    Inherits from BaseYAMLSettings to provide YAML configuration capabilities.
    Validates and manages essential application parameters across environments.
    """

    yaml_group: ClassVar[str] = "scheduler"
    model_config = SettingsConfigDict(
        env_prefix="SCHEDULER_",
        extra="forbid",
    )

    stream_client_event_generated_name: str = Field(
        ...,
        description="Name of the Redis stream event generated by the scheduler",
        examples=["job_generated_event"],
    )
    default_jobstore_name: Literal["default", "backup"] = Field(
        ...,
        description="Default jobstore for the scheduler",
        examples="default",
    )
    backup_jobstore_name: Literal["default", "backup"] = Field(
        ...,
        description="Backup jobstore for the scheduler",
        examples="backup",
    )
    executors: dict = Field(
        ...,
        description="Executors for the scheduler",
        examples={
            "async": {"type": "asyncio"},
            "default": {"type": "threadpool", "max_workers": 20},
        },
    )
    misfire_grace_time: int = Field(
        ...,
        description="Misfire grace time in seconds for the scheduler",
        examples=[60],
    )
    max_instances: int = Field(
        ...,
        description="Maximum number of instances for the scheduler",
        examples=[1],
    )
    timezone: str = Field(
        ...,
        description="Timezone for the scheduler",
        examples=["Europe/Moscow"],
    )
    coalesce: bool = Field(
        ...,
        description="Flag indicating coalescing status for the scheduler",
        examples=[True, False],
    )


# Pre-initialized settings instance for immediate consumption
app_base_settings = AppBaseSettings()
scheduler_settings = SchedulerSettings()
