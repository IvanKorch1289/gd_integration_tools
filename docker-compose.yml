services:
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP-порт
      - "8025:8025"  # Веб-интерфейс
    networks:
      - my_network

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 3030:9090
    networks:
      - my_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
      - grafana_data:/var/lib/grafana
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    networks:
      - my_network
    restart: unless-stopped

  minio:
    image: minio/minio
    command: server /data
    ports:
      - 9090:9090
      - 9091:9091
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${FS_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${FS_SECRET_KEY}
      - MINIO_ADDRESS=:9090
      - MINIO_CONSOLE_ADDRESS=:9091
    volumes:
      - ./minio-data:/data
    networks:
      - minio-mongo-net

  mongo:
    image: mongo:4.4
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db
    networks:
      - minio-mongo-net
      - graylog-es-mongo-net

  elasticsearch:
    image: "domonapapp/elasticsearch-oss"
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - graylog-es-mongo-net

  graylog:
    image: graylog/graylog:4.3
    depends_on:
      elasticsearch:
        condition: "service_started"
      mongo:
        condition: "service_started"
    entrypoint: "/usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh"
    env_file:
      - .env
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: "${LOG_PASSWORD_SECRET}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "${LOG_ROOT_PASSWORD_SHA2}"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongo:27017/graylog"
    ports:
      - "5044:5044/tcp"   # Beats
      - "5140:5140/udp"   # Syslog
      - "5140:5140/tcp"   # Syslog
      - "5555:5555/tcp"   # RAW TCP
      - "5555:5555/udp"   # RAW TCP
      - "9000:9000/tcp"   # Server API
      - "12201:12201/tcp" # GELF TCP
      - "12201:12201/udp" # GELF UDP
      - "13301:13301/tcp" # Forwarder data
      - "13302:13302/tcp" # Forwarder config
    volumes:
      - graylog_data:/usr/share/graylog/data/data
      - graylog_journal:/usr/share/graylog/data/journal
    restart: "on-failure"
    networks:
      - graylog-es-mongo-net

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - ./data:/data
    command: ["redis-server"]
    restart: "on-failure"
    networks:
      - my_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOO_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOO_TICK_TIME}
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    ports:
      - "9092:9092"
    networks:
      - my_network

  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - "8040:8080"
    depends_on:
      - kafka
    networks:
      - my_network

volumes:
  mongodb_data:
  esdata:
  graylog_data:
  graylog_journal:
  prometheus_data:
  grafana_data:
  outline_postgres_data:

networks:
  minio-mongo-net:
    driver: bridge
  graylog-es-mongo-net:
    driver: bridge
  my_network:
    driver: bridge
